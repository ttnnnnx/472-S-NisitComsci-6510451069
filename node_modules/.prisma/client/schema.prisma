model Course {
  course_id     String @id @db.Char(8)
  course_name   String @db.VarChar(50)
  course_detail String

  enrollment Enrollment[]
  review     Review[]
}

model Enrollment {
  user_uuid String @db.Uuid
  course_id String

  user   User   @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
  course Course @relation(fields: [course_id], references: [course_id], onDelete: Cascade)

  @@id([user_uuid, course_id]) // Composite primary key
}

model Review {
  review_id   Int      @id @default(autoincrement())
  review_text String
  rating      Int      @default(0)
  review_date DateTime @default(now())

  user_uuid String @db.Uuid
  course_id String

  user   User   @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
  course Course @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid     String @id @default(uuid()) @db.Uuid
  name     String @db.VarChar(15)
  surname  String @db.VarChar(15)
  password String
  email    String @unique @db.VarChar(20)
  year     Int
  role     Role   @default(student)
  salt     String @db.VarChar(10)

  enrollment Enrollment[]
  review     Review[]
}

enum Role {
  student
  teacher
}
