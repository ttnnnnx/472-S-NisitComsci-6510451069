‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á
mookob4ever
‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà

‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 3 ‡∏ô‡∏≤‡∏ó‡∏µ ‚Äî 26/3/68 17:06
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 18 ‡∏ô‡∏≤‡∏ó‡∏µ ‚Äî 26/3/68 17:20
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî 27/3/68 15:04
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 27/3/68 15:14
teacher0@gmail.com
Teacher0*
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 27/3/68 15:50
<div className="bg-white p-4 rounded-lg shadow-lg w-full mx-auto overflow-y-auto border border-gray-300"
                         style={{ maxHeight: "min(80vh, 800px)" }}>
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 20 ‡∏ô‡∏≤‡∏ó‡∏µ ‚Äî 27/3/68 21:49
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî 27/3/68 22:40
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 27/3/68 22:42
‡∏†‡∏≤‡∏û
‡∏†‡∏≤‡∏û
‡∏†‡∏≤‡∏û
‡∏†‡∏≤‡∏û
‡∏†‡∏≤‡∏û
‡∏†‡∏≤‡∏û
‡∏†‡∏≤‡∏û
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‚Äî 28/3/68 14:42
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß‡∏´‡∏≤‡∏¢
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß‡πÑ‡∏õ‡πÑ‡∏´‡∏ô
‡πÅ‡∏ü‡∏ô‡πÑ‡∏°‡πà‡∏£‡∏±‡∏Å
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 28/3/68 14:43
‡∏£‡∏±‡∏Å‡∏Å
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‚Äî 28/3/68 14:43
‡πÑ‡∏°‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏¢
‡∏≠‡∏¢‡∏∏‡πà‡πÑ‡∏´‡∏ô
‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á‡∏´‡∏£‡∏≠
‡∏ó‡∏≥‡πÑ‡∏£
‡∏≠‡∏∂‡∏´‡∏£‡∏≠
‡πÑ‡∏°‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö
‡∏≠‡∏¢‡∏∏‡πà‡∏Å‡∏∞‡∏Å‡∏¥‡πâ‡∏Å‡∏´‡∏£‡∏≠
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 28/3/68 14:44
‡∏û‡∏∂‡πà‡∏á‡∏≠‡∏∂‡πÄ‡∏™‡∏î
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‚Äî 28/3/68 14:44
‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏ó‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏á‡πÑ‡∏´‡∏ô
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 28/3/68 14:44
‡∏ñ‡πâ‡∏≤‡πÇ‡∏ó‡∏£‡∏°‡∏≤‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏ô‡∏´‡∏ô‡πâ‡∏≤
‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏•‡πâ‡∏≠‡∏á
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî 28/3/68 15:40
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 28/3/68 17:38
https://github.com/Project-Mobile-Sun-Palm/project-mobile
GitHub
GitHub - Project-Mobile-Sun-Palm/project-mobile: workout application
workout application. Contribute to Project-Mobile-Sun-Palm/project-mobile development by creating an account on GitHub.
GitHub - Project-Mobile-Sun-Palm/project-mobile: workout application
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 36 ‡∏ô‡∏≤‡∏ó‡∏µ ‚Äî 28/3/68 18:59
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 17 ‡∏ô‡∏≤‡∏ó‡∏µ ‚Äî 28/3/68 22:30
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏ß‡∏•‡∏≤ 00:35
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 19 ‡∏ô‡∏≤‡∏ó‡∏µ ‚Äî ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏ß‡∏•‡∏≤ 17:12
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 25 ‡∏ô‡∏≤‡∏ó‡∏µ ‚Äî ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏ß‡∏•‡∏≤ 17:33
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 7 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏ß‡∏•‡∏≤ 18:51
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏ß‡∏•‡∏≤ 22:14
class RoundedAppBar extends StatelessWidget implements PreferredSizeWidget {
  final String title;
  final IconData icon;
  final Widget targetPage; // üèπ ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏õ

  const RoundedAppBar({
    Key? key,
    required this.title,
    required this.icon,
    required this.targetPage, // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ targetPage
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return ClipPath(
      clipper: AppBarClipper(),
      child: Container(
        color: Colors.blue,
        padding: const EdgeInsets.only(top: 30),
        child: AppBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
          centerTitle: true,
          title: Text(
            title,
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          actions: [
            IconButton(
              icon: Icon(icon, size: 28),
              onPressed: () {
                // üöÄ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Icon ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ targetPage
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => targetPage),
                );
              },
            ),
          ],
        ),
      ),
    );
  }

  @override
  Size get preferredSize => const Size.fromHeight(100);
}
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‚Äî ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏ß‡∏•‡∏≤ 23:51
import 'package:flutter/material.dart';

class CartPage extends StatefulWidget {
  const CartPage({super.key});

  @override
‡∏Ç‡∏¢‡∏≤‡∏¢
message.txt
5 KB
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 01:18
image_picker: latest_version
<key>NSCameraUsageDescription</key>
<string>We need access to your camera</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library</string>
<key>NSPhotoLibraryAddUsageDescription</key>
<string>We need permission to save photos</string>
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‚Äî 01:23
late String _nameProduct;
  late double _price;
  late String _description;
  late String _shopLink;
  late String _imagePath;
  late String _categories;
  late String _gender;
  late String _filter;

  Product(this._nameProduct, this._price, this._description, this._shopLink, this._imagePath, this._categories, this._gender);

  Product.fromJson(Map<String, Object?> json) {
    _nameProduct = json['product name'] as String;
    _price = json['price'] as double;
    _description = json['description'] as String;
    _shopLink = json['link shop'] as String;
    _imagePath = json['product image'] as String;
    _categories = json['categories'] as String;
    _gender = json['gender'] as String;
    _filter = json['filter'] as String;
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 01:32
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
‡∏Ç‡∏¢‡∏≤‡∏¢
message.txt
8 KB
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‚Äî 01:42
Exception has occurred.
MissingPluginException (MissingPluginException(No implementation found for method pickImage on channel plugins.flutter.io/image_picker))
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî 01:51
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏ó‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî 02:42
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 03:27
Future<List<Product>> fetchProducts({String? category, String? gender, String? filter}) async {
    Query query = _firestore.collection('products');

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (category != null && category.isNotEmpty) {
      query = query.where('categories', isEqualTo: category);
    }
    if (gender != null && gender.isNotEmpty) {
      query = query.where('gender', isEqualTo: gender);
    }
    if (filter != null && filter.isNotEmpty) {
      query = query.where('filter', isEqualTo: filter);
    }

    QuerySnapshot querySnapshot = await query.get();
    
    return querySnapshot.docs.map((doc) => Product.fromJson(doc.data() as Map<String, dynamic>)).toList();
  }
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 03:35
Future<void> loadProducts() async {
    List<Product> products = await _productService.fetchProducts(
      category: _selectedCategory,
      gender: _selectedGender,
      filter: _selectedFilter,
    );
    setState(() {
      _products = products;
    });
  }
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‚Äî 03:49
Widget _buildProduct() {
    return StreamBuilder(
      stream: FirebaseFirestore.instance.collection('products').where('category', isEqualTo: selectedCategory).snapshots(),
      builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
        if(snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
‡∏Ç‡∏¢‡∏≤‡∏¢
message.txt
3 KB
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 03:56
Expanded(
            child: ListView.builder(
              itemCount: _products.length,
              itemBuilder: (context, index) {
                return ListTile(
                  leading: Image.network(_products[index]._imagePath),
                  title: Text(_products[index]._nameProduct),
                  subtitle: Text("\$${_products[index]._price.toString()}"),
                );
              },
            ),
          ),
‡∏ï‡∏∏‡∏á‡∏ï‡∏∏‡∏á ‚Äî 04:03
class CartPage extends StatefulWidget {
  const CartPage({super.key});

  @override
  State<CartPage> createState() => _CartPageState();
}
‡∏Ç‡∏¢‡∏≤‡∏¢
message.txt
3 KB
Product.fromJson(Map<String, Object?> json) {
    _nameProduct = json['product name'] as String;
    _price = json['price'] as double;
    _description = json['description'] as String;
    _shopLink = json['link shop'] as String;
    _imagePath = json['product image'] as String;
    _categories = json['categories'] as String;
    _gender = json['gender'] as String;
    _filter = json['filter'] as String;
  }
Exception has occurred.
_TypeError (type 'Null' is not a subtype of type 'String' in type cast)
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 04:11
  Product.fromJson(Map<String, dynamic> json) {
    _nameProduct = json['product name']?.toString() ?? 'Unknown';
    _price = (json['price'] as num?)?.toDouble() ?? 0.0;
    _description = json['description']?.toString() ?? 'No description';
    _shopLink = json['link shop']?.toString() ?? '';
    _imagePath = json['product image']?.toString() ?? '';
    _categories = json['categories']?.toString() ?? '';
    _gender = json['gender']?.toString() ?? '';
    _filter = json['filter']?.toString() ?? '';
  }
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 14:14
Atdelthensis
Zharut
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß ‚Äî 20:56
name: NisitComSci dockerhub

on:
  push:
    branches: [main]
  pull_request:
‡∏Ç‡∏¢‡∏≤‡∏¢
dockerhub.yaml
6 KB
name: NisitComSci CI

on:
  push:
    branches: [main, develop]
  pull_request:
‡∏Ç‡∏¢‡∏≤‡∏¢
workflow.yaml
3 KB
Ôªø
ü¶ã
‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß
rodan0808
 
 
name: NisitComSci dockerhub

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-push-backend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"

      - name: Install backend dependencies
        run: bun install
        working-directory: cs472-back

      - name: Set up Environment for backend
        run: |
          URL="${{secrets.DATABASE_URL}}"
          echo "DATABASE_URL=$URL" >> cs472-back/.env

      - name: Initialize database
        run: bunx prisma db pull
        working-directory: cs472-back

      - name: Generate Prisma Client
        run: bunx prisma generate
        working-directory: cs472-back

      - name: Run the backend tests
        run: bun test
        working-directory: cs472-back

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./cs472-back
          file: ./cs472-back/production.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/nisit-comsci-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/nisit-comsci-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nisit-comsci-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nisit-comsci-backend:buildcache,mode=max
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}

  build-and-push-frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"

      - name: Install frontend dependencies
        run: bun install
        working-directory: cs472

      - name: Set up Environment for frontend
        run: |
          BACKEND_URL="${{secrets.BACKEND_URL}}"
          AUTH_SECRET="${{secrets.AUTH_SECRET}}"
          echo "BACKEND_URL=$BACKEND_URL" >> cs472/.env
          echo "AUTH_SECRET=$AUTH_SECRET" >> cs472/.env

      - name: Run the frontend tests
        run: bun test
        working-directory: cs472

      - name: Build the frontend
        run: bun run build
        working-directory: cs472

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./cs472
          file: ./cs472/production.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/nisit-comsci-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/nisit-comsci-frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nisit-comsci-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nisit-comsci-frontend:buildcache,mode=max
          build-args: |
            BACKEND_URL="${{secrets.BACKEND_URL}}"
            AUTH_SECRET="${{secrets.AUTH_SECRET}}"

  build-github-tag:
    runs-on: ubuntu-latest
    needs: [build-and-push-backend, build-and-push-frontend]
    if: github.ref == 'refs/heads/main' 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate tag
        id: generate_tag
        run: |
          NEW_TAG=$(date +'%Y.%m.%d-%H%M%S')
          echo "TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Create and push tag
        run: |
          git tag $TAG
          git push origin $TAG
  
  build-github-release:
    runs-on: ubuntu-latest
    needs: [build-github-tag]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate release name
        id: generate_name
        run: |
          NEW_RELEASE=$(date +'%Y.%m.%d-%H%M%S')
          echo "NEW_RELEASE=$NEW_RELEASE" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ env.NEW_RELEASE }}
          release_name: Release ${{ github.ref_name }}-${{ env.NEW_RELEASE }}
          draft: false
          prerelease: false
