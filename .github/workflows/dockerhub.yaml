name: NisitComSci dockerhub

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-push-backend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"

      - name: Install backend dependencies
        run: bun install
        working-directory: cs472-back

      - name: Set up Environment for backend
        run: |
          URL="${{secrets.DATABASE_URL}}"
          echo "DATABASE_URL=$URL" >> cs472-back/.env

      - name: Initialize database
        run: bunx prisma db pull
        working-directory: cs472-back

      - name: Generate Prisma Client
        run: bunx prisma generate
        working-directory: cs472-back

      - name: Run the backend tests
        run: bun test
        working-directory: cs472-back

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./cs472-back
          file: ./cs472-back/production.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/nisit-comsci-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/nisit-comsci-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nisit-comsci-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nisit-comsci-backend:buildcache,mode=max
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}

  build-and-push-frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "latest"

      - name: Install frontend dependencies
        run: bun install
        working-directory: cs472

      - name: Set up Environment for frontend
        run: |
          BACKEND_URL="${{secrets.BACKEND_URL}}"
          AUTH_SECRET="${{secrets.AUTH_SECRET}}"
          echo "BACKEND_URL=$BACKEND_URL" >> cs472/.env
          echo "AUTH_SECRET=$AUTH_SECRET" >> cs472/.env

      - name: Run the frontend tests
        run: bun test
        working-directory: cs472

      - name: Build the frontend
        run: bun run build
        working-directory: cs472

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./cs472
          file: ./cs472/production.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/nisit-comsci-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/nisit-comsci-frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nisit-comsci-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/nisit-comsci-frontend:buildcache,mode=max
          build-args: |
            BACKEND_URL="${{secrets.BACKEND_URL}}"
            AUTH_SECRET="${{secrets.AUTH_SECRET}}"

  build-github-tag:
    runs-on: ubuntu-latest
    needs: [build-and-push-backend, build-and-push-frontend]
    if: github.ref == 'refs/heads/main' 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate tag
        id: generate_tag
        run: |
          NEW_TAG=$(date +'%Y.%m.%d-%H%M%S')
          echo "TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Create and push tag
        run: |
          git tag $TAG
          git push origin $TAG
  
  build-github-release:
    runs-on: ubuntu-latest
    needs: [build-github-tag]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate release name
        id: generate_name
        run: |
          NEW_RELEASE=$(date +'%Y.%m.%d-%H%M%S')
          echo "NEW_RELEASE=$NEW_RELEASE" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ env.NEW_RELEASE }}
          release_name: Release ${{ github.ref_name }}-${{ env.NEW_RELEASE }}
          draft: false
          prerelease: false